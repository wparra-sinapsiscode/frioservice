{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/pc/Desktop/Eber/aplicativo - v1/frioservice-react/src/context/AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { servicesData, filterServices } from '../utils/servicesMockData';\nimport { quotesData, filterQuotes } from '../utils/quotesMockData';\nimport { technicianData } from '../utils/mockData';\nimport { calendarEvents, filterCalendarEvents } from '../utils/calendarMockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  // Estado para servicios\n  const [services, setServices] = useState(servicesData);\n  const [serviceFilters, setServiceFilters] = useState({\n    status: 'todos',\n    type: 'todos',\n    technician: 'todos',\n    client: 'todos',\n    startDate: '',\n    endDate: ''\n  });\n  const [filteredServices, setFilteredServices] = useState(servicesData);\n\n  // Estado para cotizaciones\n  const [quotes, setQuotes] = useState(quotesData);\n  const [quoteFilters, setQuoteFilters] = useState({\n    status: 'todos',\n    client: 'todos',\n    type: 'todos',\n    startDate: '',\n    endDate: ''\n  });\n  const [filteredQuotes, setFilteredQuotes] = useState(quotesData);\n\n  // Estado para técnicos\n  const [technicians, setTechnicians] = useState(technicianData);\n\n  // Estado para calendario\n  const [events, setEvents] = useState(calendarEvents);\n  const [calendarFilters, setCalendarFilters] = useState({\n    types: ['programado', 'correctivo'],\n    technician: 'todos'\n  });\n  const [filteredEvents, setFilteredEvents] = useState(calendarEvents);\n\n  // Efecto para filtrar servicios cuando cambien los filtros\n  useEffect(() => {\n    setFilteredServices(filterServices(services, serviceFilters));\n  }, [services, serviceFilters]);\n\n  // Efecto para filtrar cotizaciones cuando cambien los filtros\n  useEffect(() => {\n    setFilteredQuotes(filterQuotes(quotes, quoteFilters));\n  }, [quotes, quoteFilters]);\n\n  // Efecto para filtrar eventos de calendario cuando cambien los filtros\n  useEffect(() => {\n    setFilteredEvents(filterCalendarEvents(events, calendarFilters));\n  }, [events, calendarFilters]);\n\n  // Función para agregar un nuevo servicio\n  const addService = newService => {\n    setServices(prev => [newService, ...prev]);\n  };\n\n  // Función para actualizar un servicio existente\n  const updateService = (id, updatedService) => {\n    setServices(prev => prev.map(service => service.id === id ? {\n      ...service,\n      ...updatedService\n    } : service));\n  };\n\n  // Función para eliminar un servicio\n  const deleteService = id => {\n    setServices(prev => prev.filter(service => service.id !== id));\n  };\n\n  // Función para agregar una nueva cotización\n  const addQuote = newQuote => {\n    setQuotes(prev => [newQuote, ...prev]);\n  };\n\n  // Función para actualizar una cotización existente\n  const updateQuote = (id, updatedQuote) => {\n    setQuotes(prev => prev.map(quote => quote.id === id ? {\n      ...quote,\n      ...updatedQuote\n    } : quote));\n  };\n\n  // Función para eliminar una cotización\n  const deleteQuote = id => {\n    setQuotes(prev => prev.filter(quote => quote.id !== id));\n  };\n\n  // Función para agregar un nuevo técnico\n  const addTechnician = newTechnician => {\n    setTechnicians(prev => [...prev, newTechnician]);\n  };\n\n  // Función para actualizar un técnico existente\n  const updateTechnician = (id, updatedTechnician) => {\n    setTechnicians(prev => prev.map(technician => technician.id === id ? {\n      ...technician,\n      ...updatedTechnician\n    } : technician));\n  };\n\n  // Función para eliminar un técnico\n  const deleteTechnician = id => {\n    setTechnicians(prev => prev.filter(technician => technician.id !== id));\n  };\n\n  // Función para agregar un nuevo evento de calendario\n  const addEvent = newEvent => {\n    setEvents(prev => [...prev, newEvent]);\n  };\n\n  // Función para actualizar un evento existente\n  const updateEvent = (id, updatedEvent) => {\n    setEvents(prev => prev.map(event => event.id === id ? {\n      ...event,\n      ...updatedEvent\n    } : event));\n  };\n\n  // Función para eliminar un evento\n  const deleteEvent = id => {\n    setEvents(prev => prev.filter(event => event.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      // Servicios\n      services,\n      filteredServices,\n      serviceFilters,\n      setServiceFilters,\n      addService,\n      updateService,\n      deleteService,\n      // Cotizaciones\n      quotes,\n      filteredQuotes,\n      quoteFilters,\n      setQuoteFilters,\n      addQuote,\n      updateQuote,\n      deleteQuote,\n      // Técnicos\n      technicians,\n      addTechnician,\n      updateTechnician,\n      deleteTechnician,\n      // Eventos de calendario\n      events,\n      filteredEvents,\n      calendarFilters,\n      setCalendarFilters,\n      addEvent,\n      updateEvent,\n      deleteEvent\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"nzjdLTPKZbAp4GBpn6AUgSwfDU4=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","servicesData","filterServices","quotesData","filterQuotes","technicianData","calendarEvents","filterCalendarEvents","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","services","setServices","serviceFilters","setServiceFilters","status","type","technician","client","startDate","endDate","filteredServices","setFilteredServices","quotes","setQuotes","quoteFilters","setQuoteFilters","filteredQuotes","setFilteredQuotes","technicians","setTechnicians","events","setEvents","calendarFilters","setCalendarFilters","types","filteredEvents","setFilteredEvents","addService","newService","prev","updateService","id","updatedService","map","service","deleteService","filter","addQuote","newQuote","updateQuote","updatedQuote","quote","deleteQuote","addTechnician","newTechnician","updateTechnician","updatedTechnician","deleteTechnician","addEvent","newEvent","updateEvent","updatedEvent","event","deleteEvent","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/mnt/c/Users/pc/Desktop/Eber/aplicativo - v1/frioservice-react/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { \n  servicesData, \n  filterServices \n} from '../utils/servicesMockData';\nimport { \n  quotesData, \n  filterQuotes \n} from '../utils/quotesMockData';\nimport { \n  technicianData \n} from '../utils/mockData';\nimport { \n  calendarEvents, \n  filterCalendarEvents \n} from '../utils/calendarMockData';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n  // Estado para servicios\n  const [services, setServices] = useState(servicesData);\n  const [serviceFilters, setServiceFilters] = useState({\n    status: 'todos',\n    type: 'todos',\n    technician: 'todos',\n    client: 'todos',\n    startDate: '',\n    endDate: '',\n  });\n  const [filteredServices, setFilteredServices] = useState(servicesData);\n\n  // Estado para cotizaciones\n  const [quotes, setQuotes] = useState(quotesData);\n  const [quoteFilters, setQuoteFilters] = useState({\n    status: 'todos',\n    client: 'todos',\n    type: 'todos',\n    startDate: '',\n    endDate: '',\n  });\n  const [filteredQuotes, setFilteredQuotes] = useState(quotesData);\n\n  // Estado para técnicos\n  const [technicians, setTechnicians] = useState(technicianData);\n\n  // Estado para calendario\n  const [events, setEvents] = useState(calendarEvents);\n  const [calendarFilters, setCalendarFilters] = useState({\n    types: ['programado', 'correctivo'],\n    technician: 'todos',\n  });\n  const [filteredEvents, setFilteredEvents] = useState(calendarEvents);\n\n  // Efecto para filtrar servicios cuando cambien los filtros\n  useEffect(() => {\n    setFilteredServices(filterServices(services, serviceFilters));\n  }, [services, serviceFilters]);\n\n  // Efecto para filtrar cotizaciones cuando cambien los filtros\n  useEffect(() => {\n    setFilteredQuotes(filterQuotes(quotes, quoteFilters));\n  }, [quotes, quoteFilters]);\n\n  // Efecto para filtrar eventos de calendario cuando cambien los filtros\n  useEffect(() => {\n    setFilteredEvents(filterCalendarEvents(events, calendarFilters));\n  }, [events, calendarFilters]);\n\n  // Función para agregar un nuevo servicio\n  const addService = (newService) => {\n    setServices(prev => [newService, ...prev]);\n  };\n\n  // Función para actualizar un servicio existente\n  const updateService = (id, updatedService) => {\n    setServices(prev => \n      prev.map(service => \n        service.id === id ? { ...service, ...updatedService } : service\n      )\n    );\n  };\n\n  // Función para eliminar un servicio\n  const deleteService = (id) => {\n    setServices(prev => prev.filter(service => service.id !== id));\n  };\n\n  // Función para agregar una nueva cotización\n  const addQuote = (newQuote) => {\n    setQuotes(prev => [newQuote, ...prev]);\n  };\n\n  // Función para actualizar una cotización existente\n  const updateQuote = (id, updatedQuote) => {\n    setQuotes(prev => \n      prev.map(quote => \n        quote.id === id ? { ...quote, ...updatedQuote } : quote\n      )\n    );\n  };\n\n  // Función para eliminar una cotización\n  const deleteQuote = (id) => {\n    setQuotes(prev => prev.filter(quote => quote.id !== id));\n  };\n\n  // Función para agregar un nuevo técnico\n  const addTechnician = (newTechnician) => {\n    setTechnicians(prev => [...prev, newTechnician]);\n  };\n\n  // Función para actualizar un técnico existente\n  const updateTechnician = (id, updatedTechnician) => {\n    setTechnicians(prev => \n      prev.map(technician => \n        technician.id === id ? { ...technician, ...updatedTechnician } : technician\n      )\n    );\n  };\n\n  // Función para eliminar un técnico\n  const deleteTechnician = (id) => {\n    setTechnicians(prev => prev.filter(technician => technician.id !== id));\n  };\n\n  // Función para agregar un nuevo evento de calendario\n  const addEvent = (newEvent) => {\n    setEvents(prev => [...prev, newEvent]);\n  };\n\n  // Función para actualizar un evento existente\n  const updateEvent = (id, updatedEvent) => {\n    setEvents(prev => \n      prev.map(event => \n        event.id === id ? { ...event, ...updatedEvent } : event\n      )\n    );\n  };\n\n  // Función para eliminar un evento\n  const deleteEvent = (id) => {\n    setEvents(prev => prev.filter(event => event.id !== id));\n  };\n\n  return (\n    <AppContext.Provider \n      value={{ \n        // Servicios\n        services,\n        filteredServices,\n        serviceFilters,\n        setServiceFilters,\n        addService,\n        updateService,\n        deleteService,\n        \n        // Cotizaciones\n        quotes,\n        filteredQuotes,\n        quoteFilters,\n        setQuoteFilters,\n        addQuote,\n        updateQuote,\n        deleteQuote,\n        \n        // Técnicos\n        technicians,\n        addTechnician,\n        updateTechnician,\n        deleteTechnician,\n        \n        // Eventos de calendario\n        events,\n        filteredEvents,\n        calendarFilters,\n        setCalendarFilters,\n        addEvent,\n        updateEvent,\n        deleteEvent\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SACEC,YAAY,EACZC,cAAc,QACT,2BAA2B;AAClC,SACEC,UAAU,EACVC,YAAY,QACP,yBAAyB;AAChC,SACEC,cAAc,QACT,mBAAmB;AAC1B,SACEC,cAAc,EACdC,oBAAoB,QACf,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,OAAO,MAAMC,UAAU,gBAAGZ,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMa,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAACE,YAAY,CAAC;EACtD,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC;IACnDmB,MAAM,EAAE,OAAO;IACfC,IAAI,EAAE,OAAO;IACbC,UAAU,EAAE,OAAO;IACnBC,MAAM,EAAE,OAAO;IACfC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1B,QAAQ,CAACE,YAAY,CAAC;;EAEtE;EACA,MAAM,CAACyB,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAACI,UAAU,CAAC;EAChD,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC;IAC/CmB,MAAM,EAAE,OAAO;IACfG,MAAM,EAAE,OAAO;IACfF,IAAI,EAAE,OAAO;IACbG,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGhC,QAAQ,CAACI,UAAU,CAAC;;EAEhE;EACA,MAAM,CAAC6B,WAAW,EAAEC,cAAc,CAAC,GAAGlC,QAAQ,CAACM,cAAc,CAAC;;EAE9D;EACA,MAAM,CAAC6B,MAAM,EAAEC,SAAS,CAAC,GAAGpC,QAAQ,CAACO,cAAc,CAAC;EACpD,MAAM,CAAC8B,eAAe,EAAEC,kBAAkB,CAAC,GAAGtC,QAAQ,CAAC;IACrDuC,KAAK,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC;IACnClB,UAAU,EAAE;EACd,CAAC,CAAC;EACF,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzC,QAAQ,CAACO,cAAc,CAAC;;EAEpE;EACAN,SAAS,CAAC,MAAM;IACdyB,mBAAmB,CAACvB,cAAc,CAACY,QAAQ,EAAEE,cAAc,CAAC,CAAC;EAC/D,CAAC,EAAE,CAACF,QAAQ,EAAEE,cAAc,CAAC,CAAC;;EAE9B;EACAhB,SAAS,CAAC,MAAM;IACd+B,iBAAiB,CAAC3B,YAAY,CAACsB,MAAM,EAAEE,YAAY,CAAC,CAAC;EACvD,CAAC,EAAE,CAACF,MAAM,EAAEE,YAAY,CAAC,CAAC;;EAE1B;EACA5B,SAAS,CAAC,MAAM;IACdwC,iBAAiB,CAACjC,oBAAoB,CAAC2B,MAAM,EAAEE,eAAe,CAAC,CAAC;EAClE,CAAC,EAAE,CAACF,MAAM,EAAEE,eAAe,CAAC,CAAC;;EAE7B;EACA,MAAMK,UAAU,GAAIC,UAAU,IAAK;IACjC3B,WAAW,CAAC4B,IAAI,IAAI,CAACD,UAAU,EAAE,GAAGC,IAAI,CAAC,CAAC;EAC5C,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAACC,EAAE,EAAEC,cAAc,KAAK;IAC5C/B,WAAW,CAAC4B,IAAI,IACdA,IAAI,CAACI,GAAG,CAACC,OAAO,IACdA,OAAO,CAACH,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGG,OAAO;MAAE,GAAGF;IAAe,CAAC,GAAGE,OAC1D,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,aAAa,GAAIJ,EAAE,IAAK;IAC5B9B,WAAW,CAAC4B,IAAI,IAAIA,IAAI,CAACO,MAAM,CAACF,OAAO,IAAIA,OAAO,CAACH,EAAE,KAAKA,EAAE,CAAC,CAAC;EAChE,CAAC;;EAED;EACA,MAAMM,QAAQ,GAAIC,QAAQ,IAAK;IAC7BzB,SAAS,CAACgB,IAAI,IAAI,CAACS,QAAQ,EAAE,GAAGT,IAAI,CAAC,CAAC;EACxC,CAAC;;EAED;EACA,MAAMU,WAAW,GAAGA,CAACR,EAAE,EAAES,YAAY,KAAK;IACxC3B,SAAS,CAACgB,IAAI,IACZA,IAAI,CAACI,GAAG,CAACQ,KAAK,IACZA,KAAK,CAACV,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGU,KAAK;MAAE,GAAGD;IAAa,CAAC,GAAGC,KACpD,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,WAAW,GAAIX,EAAE,IAAK;IAC1BlB,SAAS,CAACgB,IAAI,IAAIA,IAAI,CAACO,MAAM,CAACK,KAAK,IAAIA,KAAK,CAACV,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC1D,CAAC;;EAED;EACA,MAAMY,aAAa,GAAIC,aAAa,IAAK;IACvCzB,cAAc,CAACU,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEe,aAAa,CAAC,CAAC;EAClD,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAACd,EAAE,EAAEe,iBAAiB,KAAK;IAClD3B,cAAc,CAACU,IAAI,IACjBA,IAAI,CAACI,GAAG,CAAC3B,UAAU,IACjBA,UAAU,CAACyB,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGzB,UAAU;MAAE,GAAGwC;IAAkB,CAAC,GAAGxC,UACnE,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMyC,gBAAgB,GAAIhB,EAAE,IAAK;IAC/BZ,cAAc,CAACU,IAAI,IAAIA,IAAI,CAACO,MAAM,CAAC9B,UAAU,IAAIA,UAAU,CAACyB,EAAE,KAAKA,EAAE,CAAC,CAAC;EACzE,CAAC;;EAED;EACA,MAAMiB,QAAQ,GAAIC,QAAQ,IAAK;IAC7B5B,SAAS,CAACQ,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEoB,QAAQ,CAAC,CAAC;EACxC,CAAC;;EAED;EACA,MAAMC,WAAW,GAAGA,CAACnB,EAAE,EAAEoB,YAAY,KAAK;IACxC9B,SAAS,CAACQ,IAAI,IACZA,IAAI,CAACI,GAAG,CAACmB,KAAK,IACZA,KAAK,CAACrB,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGqB,KAAK;MAAE,GAAGD;IAAa,CAAC,GAAGC,KACpD,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,WAAW,GAAItB,EAAE,IAAK;IAC1BV,SAAS,CAACQ,IAAI,IAAIA,IAAI,CAACO,MAAM,CAACgB,KAAK,IAAIA,KAAK,CAACrB,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC1D,CAAC;EAED,oBACEpC,OAAA,CAACC,UAAU,CAAC0D,QAAQ;IAClBC,KAAK,EAAE;MACL;MACAvD,QAAQ;MACRU,gBAAgB;MAChBR,cAAc;MACdC,iBAAiB;MACjBwB,UAAU;MACVG,aAAa;MACbK,aAAa;MAEb;MACAvB,MAAM;MACNI,cAAc;MACdF,YAAY;MACZC,eAAe;MACfsB,QAAQ;MACRE,WAAW;MACXG,WAAW;MAEX;MACAxB,WAAW;MACXyB,aAAa;MACbE,gBAAgB;MAChBE,gBAAgB;MAEhB;MACA3B,MAAM;MACNK,cAAc;MACdH,eAAe;MACfC,kBAAkB;MAClByB,QAAQ;MACRE,WAAW;MACXG;IACF,CAAE;IAAAvD,QAAA,EAEDA;EAAQ;IAAA0D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;AAAC5D,EAAA,CAtKWF,WAAW;AAAA+D,EAAA,GAAX/D,WAAW;AAAA,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}